version: '3'

services:
  db_post:
    container_name: postgresdbposts
    image: postgres:13.3-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: postgres
    volumes:
      - posts_data:/var/lib/postgresql/data

  api_post:
    container_name: jibjabpost
    image: docker.pkg.github.com/jibber-jabber-inc/jib-jab-api-posts/jibjab_posts-production:latest
    environment:
      DB_USER: postgres
      DB_PASSWORD: 1234
      DB_NAME: postgres
      DB_HOST: postgresdbposts
      DB_PORT: 5432
      AUTH_PORT: 8080
      AUTH_HOST: jibjabuser

  db_user:
    container_name: postgresdbusers
    image: postgres:13.3-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: postgres
    volumes:
      - users_data:/var/lib/postgresql/data

  api_user:
    container_name: jibjabuser
    image: docker.pkg.github.com/jibber-jabber-inc/jib-jab-api-users/jibjab_users-production:latest
    environment:
      DB_USER: postgres
      DB_PASSWORD: 1234
      DB_NAME: postgres
      DB_HOST: postgresdbusers
      DB_PORT: 5432
      JJ_SECRET: secret_key
      JJ_EXPIRATION: 1000000000

  db_message:
    container_name: postgresdbmessages
    image: postgres:13.3-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: postgres
    volumes:
      - messages_data:/var/lib/postgresql/data

  api_message:
    container_name: jibjabmessage
    depends_on: [db_message]
    image: docker.pkg.github.com/jibber-jabber-inc/jib-jab-api-messages/jibjab_messages-productio:latest
    environment:
      DB_USER: postgres
      DB_PASSWORD: 1234
      DB_NAME: postgres
      DB_HOST: postgresdbmessages
      DB_PORT: 5432
      AUTH_PORT: 8080
      AUTH_HOST: jibjabuser
      CLIENT_URL: "http://jibjabclient:80"

  client:
    container_name: jibjabclient
    image: docker.pkg.github.com/jibber-jabber-inc/jib-jab-client/jibjab_client-production:latest

  revproxy:
    container_name: revproxy
    build:
      context: .
      dockerfile: Dockerfile.prod.proxy
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"


volumes:
  posts_data:
    external: true
  users_data:
    external: true
  messages_data:
    external: true
